## [Start] Validate update mutation for @key 'StatuswithApprovedDayMonthYear'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["isApproved", "dayMonthYear"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When updating any part of the composite sort key for @key 'StatuswithApprovedDayMonthYear', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate update mutation for @key 'StatuswithApprovedDayMonthYear'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "isApproved#dayMonthYear": "isApprovedDayMonthYear"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("isApproved#dayMonthYear", "isApprovedDayMonthYear"))
#end
$util.qr($ctx.args.input.put("isApproved#dayMonthYear","${ctx.args.input.isApproved}#${ctx.args.input.dayMonthYear}"))
## [Start] Validate update mutation for @key 'StatuswithApprovedCreatedAt'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["isApproved", "createdAt"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When updating any part of the composite sort key for @key 'StatuswithApprovedCreatedAt', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate update mutation for @key 'StatuswithApprovedCreatedAt'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "isApproved#createdAt": "isApprovedCreatedAt"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("isApproved#createdAt", "isApprovedCreatedAt"))
#end
$util.qr($ctx.args.input.put("isApproved#createdAt","${ctx.args.input.isApproved}#${ctx.args.input.createdAt}"))
## [Start] Validate update mutation for @key 'StatuswithApprovedMonthYear'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["isApproved", "monthYear"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When updating any part of the composite sort key for @key 'StatuswithApprovedMonthYear', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate update mutation for @key 'StatuswithApprovedMonthYear'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "isApproved#monthYear": "isApprovedMonthYear"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("isApproved#monthYear", "isApprovedMonthYear"))
#end
$util.qr($ctx.args.input.put("isApproved#monthYear","${ctx.args.input.isApproved}#${ctx.args.input.monthYear}"))




## [Start] Validate update mutation for @key 'ApprovedwithDayMonthYearCreatedAt'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["dayMonthYear", "createdAt"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When updating any part of the composite sort key for @key 'ApprovedwithDayMonthYearCreatedAt', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate update mutation for @key 'ApprovedwithDayMonthYearCreatedAt'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "dayMonthYear#createdAt": "dayMonthYearCreatedAt"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("dayMonthYear#createdAt", "dayMonthYearCreatedAt"))
#end
$util.qr($ctx.args.input.put("dayMonthYear#createdAt","${ctx.args.input.dayMonthYear}#${ctx.args.input.createdAt}"))
## [Start] Validate update mutation for @key 'StatuswithDayMonthYearCreatedAt'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["dayMonthYear", "createdAt"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When updating any part of the composite sort key for @key 'StatuswithDayMonthYearCreatedAt', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate update mutation for @key 'StatuswithDayMonthYearCreatedAt'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "dayMonthYear#createdAt": "dayMonthYearCreatedAt"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("dayMonthYear#createdAt", "dayMonthYearCreatedAt"))
#end
$util.qr($ctx.args.input.put("dayMonthYear#createdAt","${ctx.args.input.dayMonthYear}#${ctx.args.input.createdAt}"))
## [Start] Validate update mutation for @key 'ApprovedwithMonthYearCreatedAt'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["monthYear", "createdAt"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When updating any part of the composite sort key for @key 'ApprovedwithMonthYearCreatedAt', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate update mutation for @key 'ApprovedwithMonthYearCreatedAt'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "monthYear#createdAt": "monthYearCreatedAt"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("monthYear#createdAt", "monthYearCreatedAt"))
#end
$util.qr($ctx.args.input.put("monthYear#createdAt","${ctx.args.input.monthYear}#${ctx.args.input.createdAt}"))
## [Start] Validate update mutation for @key 'StatuswithMonthYearCreatedAt'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["monthYear", "createdAt"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When updating any part of the composite sort key for @key 'StatuswithMonthYearCreatedAt', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate update mutation for @key 'StatuswithMonthYearCreatedAt'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "monthYear#createdAt": "monthYearCreatedAt"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("monthYear#createdAt", "monthYearCreatedAt"))
#end
$util.qr($ctx.args.input.put("monthYear#createdAt","${ctx.args.input.monthYear}#${ctx.args.input.createdAt}"))




#if( $authCondition && $authCondition.expression != "" )
  #set( $condition = $authCondition )
  #if( $modelObjectKey )
    #foreach( $entry in $modelObjectKey.entrySet() )
      $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
      $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
    #end
  #else
    $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
    $util.qr($condition.expressionNames.put("#id", "id"))
  #end
#else
  #if( $modelObjectKey )
    #set( $condition = {
  "expression": "",
  "expressionNames": {},
  "expressionValues": {}
} )
    #foreach( $entry in $modelObjectKey.entrySet() )
      #if( $velocityCount == 1 )
        $util.qr($condition.put("expression", "attribute_exists(#keyCondition$velocityCount)"))
      #else
        $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)"))
      #end
      $util.qr($condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key"))
    #end
  #else
    #set( $condition = {
  "expression": "attribute_exists(#id)",
  "expressionNames": {
      "#id": "id"
  },
  "expressionValues": {}
} )
  #end
#end
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put("updatedAt", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put("__typename", "PurchaseRequest"))
## Update condition if type is @versioned **
#if( $versionedCondition )
  $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  $util.qr($condition.expressionValues.putAll($versionedCondition.expressionValues))
#end
#if( $context.args.condition )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition)) )
  $util.qr($condition.put("expression", "($condition.expression) AND $conditionFilterExpressions.expression"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  "expression": $condition.expression,
  "expressionNames": $condition.expressionNames
} )
#end
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $modelObjectKey.entrySet() )
    $util.qr($keyFields.add("$entry.key"))
  #end
#else
  #set( $keyFields = ["id"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($context.args.input, $keyFields).entrySet() )
  #if( !$util.isNull($dynamodbNameOverrideMap) && $dynamodbNameOverrideMap.containsKey("$entry.key") )
    #set( $entryKeyAttributeName = $dynamodbNameOverrideMap.get("$entry.key") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add("#$entryKeyAttributeName") )
    $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
  #else
    $util.qr($expSet.put("#$entryKeyAttributeName", ":$entryKeyAttributeName"))
    $util.qr($expNames.put("#$entryKeyAttributeName", "$entry.key"))
    $util.qr($expValues.put(":$entryKeyAttributeName", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = "" )
#if( !$expSet.isEmpty() )
  #set( $expression = "SET" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = "$expression $entry.key = $entry.value" )
    #if( $foreach.hasNext() )
      #set( $expression = "$expression," )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = "$expression ADD" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = "$expression $entry.key $entry.value" )
    #if( $foreach.hasNext() )
      #set( $expression = "$expression," )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = "$expression REMOVE" )
  #foreach( $entry in $expRemove )
    #set( $expression = "$expression $entry" )
    #if( $foreach.hasNext() )
      #set( $expression = "$expression," )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put("expression", "$expression"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put("expressionNames", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put("expressionValues", $expValues))
#end
{
  "version": "2018-05-29",
  "operation": "UpdateItem",
  "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  "id": {
      "S": $util.toJson($context.args.input.id)
  }
} #end,
  "update": $util.toJson($update),
  "condition": $util.toJson($condition)
}