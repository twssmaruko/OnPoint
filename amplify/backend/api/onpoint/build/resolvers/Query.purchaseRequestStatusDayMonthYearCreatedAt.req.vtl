## [Start] Set query expression for @key **
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && $util.isNullOrBlank($ctx.args.status) )
  $util.error("When providing argument 'dayMonthYearCreatedAt' you must also provide 'status'.", "InvalidArgumentsError")
#end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) )
  #set( $sortKeyArgumentOperations = $ctx.args.dayMonthYearCreatedAt.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error("Argument dayMonthYearCreatedAt must specify at most one key condition operation.", "InvalidArgumentsError")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == "between" )
      #if( $ctx.args.dayMonthYearCreatedAt.between.size() != 2 )
        $util.error("Argument 'dayMonthYearCreatedAt.between' expects exactly two elements.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.dayMonthYearCreatedAt.between[0].createdAt) && $util.isNullOrBlank($ctx.args.dayMonthYearCreatedAt.between[0].dayMonthYear) )
        $util.error("When providing argument 'dayMonthYearCreatedAt.between[0].createdAt' you must also provide 'dayMonthYearCreatedAt.between[0].dayMonthYear'.", "InvalidArgumentsError")
      #end
      #if( !$util.isNullOrBlank($ctx.args.dayMonthYearCreatedAt.between[1].createdAt) && $util.isNullOrBlank($ctx.args.dayMonthYearCreatedAt.between[1].dayMonthYear) )
        $util.error("When providing argument 'dayMonthYearCreatedAt.between[1].createdAt' you must also provide 'dayMonthYearCreatedAt.between[1].dayMonthYear'.", "InvalidArgumentsError")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.dayMonthYearCreatedAt.get("$operation").createdAt) && $util.isNullOrBlank($ctx.args.dayMonthYearCreatedAt.get("$operation").dayMonthYear) )
        $util.error("When providing argument 'dayMonthYearCreatedAt.$operation.createdAt' you must also provide 'dayMonthYearCreatedAt.$operation.dayMonthYear'.", "InvalidArgumentsError")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.status) )
  #set( $modelQueryExpression.expression = "#status = :status" )
  #set( $modelQueryExpression.expressionNames = {
  "#status": "status"
} )
  #set( $modelQueryExpression.expressionValues = {
  ":status": {
      "S": "$ctx.args.status"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = "" )
#set( $sortKeyValue2 = "" )
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && !$util.isNull($ctx.args.dayMonthYearCreatedAt.beginsWith) )
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.beginsWith.dayMonthYear) ) #set( $sortKeyValue = "$ctx.args.dayMonthYearCreatedAt.beginsWith.dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.beginsWith.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.dayMonthYearCreatedAt.beginsWith.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "dayMonthYear#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && !$util.isNull($ctx.args.dayMonthYearCreatedAt.between) )
  #if( $ctx.args.dayMonthYearCreatedAt.between.size() != 2 )
    $util.error("Argument dayMonthYearCreatedAt.between expects exactly 2 elements.")
  #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.between[0].dayMonthYear) ) #set( $sortKeyValue = "$ctx.args.dayMonthYearCreatedAt.between[0].dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.between[0].createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.dayMonthYearCreatedAt.between[0].createdAt" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.between[1].dayMonthYear) ) #set( $sortKeyValue2 = "$ctx.args.dayMonthYearCreatedAt.between[1].dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.between[1].createdAt) ) #set( $sortKeyValue2 = "$sortKeyValue2#$ctx.args.dayMonthYearCreatedAt.between[1].createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "dayMonthYear#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey0", { "S": "$sortKeyValue" }))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey1", { "S": "$sortKeyValue2" }))
#end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && !$util.isNull($ctx.args.dayMonthYearCreatedAt.eq) )
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.eq.dayMonthYear) ) #set( $sortKeyValue = "$ctx.args.dayMonthYearCreatedAt.eq.dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.eq.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.dayMonthYearCreatedAt.eq.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey = :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "dayMonthYear#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && !$util.isNull($ctx.args.dayMonthYearCreatedAt.lt) )
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.lt.dayMonthYear) ) #set( $sortKeyValue = "$ctx.args.dayMonthYearCreatedAt.lt.dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.lt.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.dayMonthYearCreatedAt.lt.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey < :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "dayMonthYear#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && !$util.isNull($ctx.args.dayMonthYearCreatedAt.le) )
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.le.dayMonthYear) ) #set( $sortKeyValue = "$ctx.args.dayMonthYearCreatedAt.le.dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.le.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.dayMonthYearCreatedAt.le.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey <= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "dayMonthYear#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && !$util.isNull($ctx.args.dayMonthYearCreatedAt.gt) )
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.gt.dayMonthYear) ) #set( $sortKeyValue = "$ctx.args.dayMonthYearCreatedAt.gt.dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.gt.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.dayMonthYearCreatedAt.gt.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey > :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "dayMonthYear#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt) && !$util.isNull($ctx.args.dayMonthYearCreatedAt.ge) )
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.ge.dayMonthYear) ) #set( $sortKeyValue = "$ctx.args.dayMonthYearCreatedAt.ge.dayMonthYear" ) #end
#if( !$util.isNull($ctx.args.dayMonthYearCreatedAt.ge.createdAt) ) #set( $sortKeyValue = "$sortKeyValue#$ctx.args.dayMonthYearCreatedAt.ge.createdAt" ) #end
  #set( $modelQueryExpression.expression = "$modelQueryExpression.expression AND #sortKey >= :sortKey" )
  $util.qr($modelQueryExpression.expressionNames.put("#sortKey", "dayMonthYear#createdAt"))
  $util.qr($modelQueryExpression.expressionValues.put(":sortKey", { "S": "$sortKeyValue" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for @key **
#set( $limit = $util.defaultIfNull($context.args.limit, 100) )
#set( $QueryRequest = {
  "version": "2018-05-29",
  "operation": "Query",
  "limit": $limit,
  "query": $modelQueryExpression,
  "index": "StatuswithDayMonthYearCreatedAt"
} )
#if( !$util.isNull($ctx.args.sortDirection)
                    && $ctx.args.sortDirection == "DESC" )
  #set( $QueryRequest.scanIndexForward = false )
#else
  #set( $QueryRequest.scanIndexForward = true )
#end
#if( $context.args.nextToken ) #set( $QueryRequest.nextToken = $context.args.nextToken ) #end
#if( $context.args.filter ) #set( $QueryRequest.filter = $util.parseJson("$util.transform.toDynamoDBFilterExpression($ctx.args.filter)") ) #end
$util.toJson($QueryRequest)